#Step1: Download NGS data 
#use sftp and the account details, password, etc. provided by the sequencing facility
sftp -r data_13028@imb-sftp.imb.uq.edu.au:* .
#check the download 
md5sum *gz >h
#cat h ../md5sum.txt |awk '{print $1}' | sort -k1 | uniq -d |wc -l
#48 
#chech the md5sum numbers! and compare with what the seq facility sent! otherwise transfer isnot complete! 
#48 samples 24 each of R1 and R1 (in case of paired-end sequencing), 3 per sample > 8 libraries ! All good :) 


#Step2: QCing samples usign FASTQC: use nano, vi, or any text editor to write this BASH and save as fastqc.sh
#Check if you are using SLURM or PBS!

#!/bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=5gb
#SBATCH --time=30:00
#SBATCH --mail-user=amin.esmail@csiro.au
/apps/fastqc/0.11.8/fastqc ${FILE}

#in the terminal type: 
for i in `ls *gz`; do sbatch --export FILE=$i fastQC.sh ;done
#inspect the files carefully, check for quality, adapters, etc... 
#assume you have high quality data! note you really care about that if you are going to assemble the reads, for mapping the aligner will do some QC before mapping 

#Step3: prepare the refrence for mapping:
open nano, type the following and save as bowtie2-build.sh
#!/bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=20gb
#SBATCH --time=16:00:00
#SBATCH --mail-user=amin.esmail@csiro.au
module load bowtie
module load samtools
bowtie2-build genome.fq genome

#Step4: Mapping reads using BOWTIE2 
AGAIN open nano, print the following and save as  bowtie2-mapping.sh
#!/bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=20gb
#SBATCH --time=16:00:00
#SBATCH --mail-user=amin.esmail@csiro.au
module load bowtie
module load samtools
bowtie2 --very-sensitive -x /PATH/name-of-the-index -1 ${FILE}_R1_001.fastq.gz -2 ${FILE}_R2_001.fastq.gz |samtools view -u - |samtools sort - >${FILE}.bam

#To running the bowtie2-mapping.sh, you need a FILE variable which is the name of the sample without the suffix (_R1_001.fastq.gz AND _R2_001.fastq.gz) in my case 
#in the terminal type the following, check your file names and change accordingly! Otherwise, with no surpise NOTHING will work 
ls *fastq.gz |tr '_' "\t" |awk '{print $1"_"$2"_"$3}' |sort -k1 | uniq >file_names2  
for i  in `cat file_names2`; do sbatch --export FILE=$i bowtie2.sh ;done

#Step5:MAPPING STATSISTICS using samtools flagstat
create a script for that called samtools_flagstat.sh
#!/bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=10gb
#SBATCH --time=40:00
#SBATCH --mail-user=amin.esmail@csiro.au
module load samtools
samtools flagstat ${FILE} >${FILE}.stats

#in the terminal type:
for i in `ls *bam`; do sbatch --export FILE=$i samtools_flagstat.sh ;done

#Step6:MARK and remove duplicates using MarkDuplicates through picard tools!
04_MarkDuplicates.sh SCRIPT
for i in `ls *bam`; do ./04_MarkDuplicates.sh $i ;done

#!/bin/bash
#USAGE="Usage: $0 <sample name> <illumina run dir> <species> <genome> <out dir>"
USAGE="Usage: $0 <sample name>"
if [ "$#" != "1" ]; then
        echo "$USAGE"
        exit 1
fi
#BATCH PARAMETERS
SBATCH_PARAM_2="  --output slurm.%j.out --error slurm.%j.err --ntasks-per-node=8 --mem=10gb --time=4:00:00 --mail-user=amin.esmail@csiro.au"

OUT=$1

CMD1_PARAM="time java -jar /apps/picard/1.119/MarkDuplicates.jar INPUT=$OUT OUTPUT=$OUT.dedup_reads.bam METRICS_FILE=$OUT.metrics.txt VALIDATION_STRINGENCY=LENIENT"
CMD2_PARAM="time java -jar /apps/picard/1.119/BuildBamIndex.jar INPUT=$OUT.dedup_reads.bam VALIDATION_STRINGENCY=LENIENT"

#creating the job to put together the bwa mapping for the different files vy bowtie sampe

cat > ${JOBNAME}_04.qsub <<EOT
#! /bin/bash
#SBATCH --job-name ${JOBNAME}_
#SBATCH $SBATCH_PARAM_2

module load jdk/1.7.0_65
module load picard/1.119
module load gatk/3.2.0

$CMD1_PARAM
$CMD2_PARAM
EOT
#Submittion job to pearcey server
JOB=`sbatch  ${JOBNAME}_04.qsub`
echo $JOB

#Step6:merging alignment files per sample 
samtools_merge.sh
#! /bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=10gb
#SBATCH --time=6:00:00
#SBATCH --mail-user=amin.esmail@csiro.au
module load samtools
samtools merge ${FILE}.dedup.bam ${FILE}_L001.bam.dedup_reads.bam ${FILE}_L002.bam.dedup_reads.bam ${FILE}_L003.bam.dedup_reads.bam ${FILE}_L004.bam.dedup_reads.bam

#to excute type the following: 
ls *bam |tr "_" "\t" |awk '{print $1"_"$2"_"$3}' |uniq |grep -v ATAC >files3
for i in `cat files3` ;do sbatch --export FILE=$i samtools_merge.sh ;done

#Step7:Quality multiple mapping filtering based on MAPQ using quality_multiple.sh
#! /bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=10gb
#SBATCH --time=6:00:00
#SBATCH --mail-user=amin.esmail@csiro.au
module load samtools
samtools view -b -q 10 ${FILE} >${FILE}.u.bam

#to excute type the following to output reads that have been uniquely mapped!
for i in `ls *dedup*bam | grep -v L00`; do sbatch --export FILE=$i quality_multiple.sh ;done

#Step8:Passing final BAM files to bigWig format to help on the visualization

Grep the header from a bamfiles to obtain the chromosome length and generate the genome.txt file
samtools view -H file.bam|grep @SQ|sed 's/@SQ\tSN:\|LN://g' > genome.txt

bam2bedGraph.sh
#!/bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=10gb
#SBATCH --time=40:00
#SBATCH --mail-user=amin.esmail@csiro.au
module load bedtools
bedtools genomecov -bg -split -ibam ${FILE} -g genome.txt > ${FILE}.split.bg
bedtools genomecov -bg  -ibam ${FILE}  -g genome.txt > ${FILE}.bg

#to excute type the following
for i in `ls *u.bam`; do sbatch --export FILE=$i bam2bedGraph.sh;done

From bedGraph to bigwig using the script bg2bWig_brahman.sh

#!/bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=10gb
#SBATCH --time=40:00
#SBATCH --mail-user=amin.esmail@csiro.au
/apps/kentutils/v302/bin/bedGraphToBigWig ${FILE} genome.txt ${FILE}.bw

Now check the peaks in these samples using IGV! 

Step9: Peak calling using MACS2

#!/bin/bash
#SBATCH --output  dump.out
#SBATCH --error dump.err
#SBATCH --mem=10gb
#SBATCH --time=6:00:00
#SBATCH --mail-user=amin.esmail@csiro.au
module load python
macs2 callpeak -t ${FILE} -f BAMPE -n ${FILE}_BAMPE

Step10: consensus set of peaks 

Step11: counts reads per peak using HTSeq 

Step12: Differential accessibility 

Step13: Co-accessibility analyses
